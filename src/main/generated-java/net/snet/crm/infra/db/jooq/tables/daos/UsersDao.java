/*
 * This file is generated by jOOQ.
 */
package net.snet.crm.infra.db.jooq.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import net.snet.crm.infra.db.jooq.tables.Users;
import net.snet.crm.infra.db.jooq.tables.records.UsersRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersDao extends DAOImpl<UsersRecord, net.snet.crm.infra.db.jooq.tables.pojos.Users, Long> {

    /**
     * Create a new UsersDao without any configuration
     */
    public UsersDao() {
        super(Users.USERS, net.snet.crm.infra.db.jooq.tables.pojos.Users.class);
    }

    /**
     * Create a new UsersDao with an attached configuration
     */
    public UsersDao(Configuration configuration) {
        super(Users.USERS, net.snet.crm.infra.db.jooq.tables.pojos.Users.class, configuration);
    }

    @Override
    public Long getId(net.snet.crm.infra.db.jooq.tables.pojos.Users object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Users.USERS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchById(Long... values) {
        return fetch(Users.USERS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public net.snet.crm.infra.db.jooq.tables.pojos.Users fetchOneById(Long value) {
        return fetchOne(Users.USERS.ID, value);
    }

    /**
     * Fetch records that have <code>login BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchRangeOfLogin(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.LOGIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login IN (values)</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchByLogin(String... values) {
        return fetch(Users.USERS.LOGIN, values);
    }

    /**
     * Fetch a unique record that has <code>login = value</code>
     */
    public net.snet.crm.infra.db.jooq.tables.pojos.Users fetchOneByLogin(String value) {
        return fetchOne(Users.USERS.LOGIN, value);
    }

    /**
     * Fetch records that have <code>passwd BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchRangeOfPasswd(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.PASSWD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>passwd IN (values)</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchByPasswd(String... values) {
        return fetch(Users.USERS.PASSWD, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchByName(String... values) {
        return fetch(Users.USERS.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public net.snet.crm.infra.db.jooq.tables.pojos.Users fetchOneByName(String value) {
        return fetchOne(Users.USERS.NAME, value);
    }

    /**
     * Fetch records that have <code>roles BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchRangeOfRoles(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.ROLES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>roles IN (values)</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchByRoles(String... values) {
        return fetch(Users.USERS.ROLES, values);
    }

    /**
     * Fetch records that have <code>key BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchRangeOfKey(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.KEY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>key IN (values)</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchByKey(String... values) {
        return fetch(Users.USERS.KEY, values);
    }

    /**
     * Fetch records that have <code>reports_to BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchRangeOfReportsTo(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Users.USERS.REPORTS_TO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>reports_to IN (values)</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchByReportsTo(Long... values) {
        return fetch(Users.USERS.REPORTS_TO, values);
    }

    /**
     * Fetch records that have <code>operation_country BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchRangeOfOperationCountry(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.OPERATION_COUNTRY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>operation_country IN (values)</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchByOperationCountry(String... values) {
        return fetch(Users.USERS.OPERATION_COUNTRY, values);
    }

    /**
     * Fetch records that have <code>full_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchRangeOfFullName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.FULL_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>full_name IN (values)</code>
     */
    public List<net.snet.crm.infra.db.jooq.tables.pojos.Users> fetchByFullName(String... values) {
        return fetch(Users.USERS.FULL_NAME, values);
    }
}
