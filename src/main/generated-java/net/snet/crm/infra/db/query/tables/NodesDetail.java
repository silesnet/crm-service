/*
 * This file is generated by jOOQ.
 */
package net.snet.crm.infra.db.query.tables;


import javax.annotation.Generated;

import net.snet.crm.infra.db.query.Query;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NodesDetail extends TableImpl<Record> {

    private static final long serialVersionUID = 1259394484;

    /**
     * The reference instance of <code>query.nodes_detail</code>
     */
    public static final NodesDetail NODES_DETAIL = new NodesDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>query.nodes_detail.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>query.nodes_detail.country</code>.
     */
    public final TableField<Record, String> COUNTRY = createField(DSL.name("country"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>query.nodes_detail.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>query.nodes_detail.type</code>.
     */
    public final TableField<Record, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>query.nodes_detail.master</code>.
     */
    public final TableField<Record, String> MASTER = createField(DSL.name("master"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>query.nodes_detail.link_to</code>.
     */
    public final TableField<Record, String> LINK_TO = createField(DSL.name("link_to"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>query.nodes_detail.area</code>.
     */
    public final TableField<Record, String> AREA = createField(DSL.name("area"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>query.nodes_detail.vendor</code>.
     */
    public final TableField<Record, String> VENDOR = createField(DSL.name("vendor"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>query.nodes_detail.model</code>.
     */
    public final TableField<Record, String> MODEL = createField(DSL.name("model"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>query.nodes_detail.info</code>.
     */
    public final TableField<Record, String> INFO = createField(DSL.name("info"), org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>query.nodes_detail.monitoring</code>.
     */
    public final TableField<Record, String> MONITORING = createField(DSL.name("monitoring"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>query.nodes_detail.path</code>.
     */
    public final TableField<Record, String> PATH = createField(DSL.name("path"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>query.nodes_detail.ping</code>.
     */
    public final TableField<Record, String> PING = createField(DSL.name("ping"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>query.nodes_detail.is_wireless</code>.
     */
    public final TableField<Record, Boolean> IS_WIRELESS = createField(DSL.name("is_wireless"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>query.nodes_detail.polarization</code>.
     */
    public final TableField<Record, String> POLARIZATION = createField(DSL.name("polarization"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>query.nodes_detail.width</code>.
     */
    public final TableField<Record, String> WIDTH = createField(DSL.name("width"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>query.nodes_detail.norm</code>.
     */
    public final TableField<Record, String> NORM = createField(DSL.name("norm"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>query.nodes_detail.tdma</code>.
     */
    public final TableField<Record, Boolean> TDMA = createField(DSL.name("tdma"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>query.nodes_detail.aggregation</code>.
     */
    public final TableField<Record, Boolean> AGGREGATION = createField(DSL.name("aggregation"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>query.nodes_detail.ssid</code>.
     */
    public final TableField<Record, String> SSID = createField(DSL.name("ssid"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>query.nodes_detail.frequency</code>.
     */
    public final TableField<Record, Integer> FREQUENCY = createField(DSL.name("frequency"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>query.nodes_detail.power</code>.
     */
    public final TableField<Record, String> POWER = createField(DSL.name("power"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>query.nodes_detail.antenna</code>.
     */
    public final TableField<Record, String> ANTENNA = createField(DSL.name("antenna"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>query.nodes_detail.wds</code>.
     */
    public final TableField<Record, Boolean> WDS = createField(DSL.name("wds"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>query.nodes_detail.authorization</code>.
     */
    public final TableField<Record, String> AUTHORIZATION = createField(DSL.name("authorization"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>query.nodes_detail.azimuth</code>.
     */
    public final TableField<Record, String> AZIMUTH = createField(DSL.name("azimuth"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>query.nodes_detail.active</code>.
     */
    public final TableField<Record, Boolean> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>query.nodes_detail</code> table reference
     */
    public NodesDetail() {
        this(DSL.name("nodes_detail"), null);
    }

    /**
     * Create an aliased <code>query.nodes_detail</code> table reference
     */
    public NodesDetail(String alias) {
        this(DSL.name(alias), NODES_DETAIL);
    }

    /**
     * Create an aliased <code>query.nodes_detail</code> table reference
     */
    public NodesDetail(Name alias) {
        this(alias, NODES_DETAIL);
    }

    private NodesDetail(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private NodesDetail(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> NodesDetail(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, NODES_DETAIL);
    }

    @Override
    public Schema getSchema() {
        return Query.QUERY;
    }

    @Override
    public NodesDetail as(String alias) {
        return new NodesDetail(DSL.name(alias), this);
    }

    @Override
    public NodesDetail as(Name alias) {
        return new NodesDetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NodesDetail rename(String name) {
        return new NodesDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NodesDetail rename(Name name) {
        return new NodesDetail(name, null);
    }
}
