/*
 * This file is generated by jOOQ.
 */
package net.snet.crm.infra.db.jooq.tables.pojos;


import java.io.Serializable;
import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "services", schema = "public", uniqueConstraints = {
    @UniqueConstraint(name = "services_pkey", columnNames = {"id"})
}, indexes = {
    @Index(name = "customer_index2", columnList = "customer_id ASC"),
    @Index(name = "services_pkey", unique = true, columnList = "id ASC"),
    @Index(name = "services_search_idx", columnList = "lexems ASC")
})
public class Services implements Serializable {

    private static final long serialVersionUID = 1551847904;

    private final Long      id;
    private final Long      customerId;
    private final Timestamp periodFrom;
    private final Timestamp periodTo;
    private final String    name;
    private final Integer   price;
    private final Integer   frequency;
    private final String    info;
    private final String    additionalname;
    private final String    status;
    private final String    data;
    private final Integer   addressId;
    private final Integer   placeId;
    private final Object    lexems;
    private final String    location;
    private final Boolean   dph;
    private final Integer   productId;

    public Services(Services value) {
        this.id = value.id;
        this.customerId = value.customerId;
        this.periodFrom = value.periodFrom;
        this.periodTo = value.periodTo;
        this.name = value.name;
        this.price = value.price;
        this.frequency = value.frequency;
        this.info = value.info;
        this.additionalname = value.additionalname;
        this.status = value.status;
        this.data = value.data;
        this.addressId = value.addressId;
        this.placeId = value.placeId;
        this.lexems = value.lexems;
        this.location = value.location;
        this.dph = value.dph;
        this.productId = value.productId;
    }

    public Services(
        Long      id,
        Long      customerId,
        Timestamp periodFrom,
        Timestamp periodTo,
        String    name,
        Integer   price,
        Integer   frequency,
        String    info,
        String    additionalname,
        String    status,
        String    data,
        Integer   addressId,
        Integer   placeId,
        Object    lexems,
        String    location,
        Boolean   dph,
        Integer   productId
    ) {
        this.id = id;
        this.customerId = customerId;
        this.periodFrom = periodFrom;
        this.periodTo = periodTo;
        this.name = name;
        this.price = price;
        this.frequency = frequency;
        this.info = info;
        this.additionalname = additionalname;
        this.status = status;
        this.data = data;
        this.addressId = addressId;
        this.placeId = placeId;
        this.lexems = lexems;
        this.location = location;
        this.dph = dph;
        this.productId = productId;
    }

    @Id
    @Column(name = "id", nullable = false, precision = 64)
    @NotNull
    public Long getId() {
        return this.id;
    }

    @Column(name = "customer_id", precision = 64)
    public Long getCustomerId() {
        return this.customerId;
    }

    @Column(name = "period_from", nullable = false)
    @NotNull
    public Timestamp getPeriodFrom() {
        return this.periodFrom;
    }

    @Column(name = "period_to")
    public Timestamp getPeriodTo() {
        return this.periodTo;
    }

    @Column(name = "name", nullable = false, length = 70)
    @NotNull
    @Size(max = 70)
    public String getName() {
        return this.name;
    }

    @Column(name = "price", nullable = false, precision = 32)
    @NotNull
    public Integer getPrice() {
        return this.price;
    }

    @Column(name = "frequency", precision = 32)
    public Integer getFrequency() {
        return this.frequency;
    }

    @Column(name = "info", length = 512)
    @Size(max = 512)
    public String getInfo() {
        return this.info;
    }

    @Column(name = "additionalname", length = 50)
    @Size(max = 50)
    public String getAdditionalname() {
        return this.additionalname;
    }

    @Column(name = "status", nullable = false)
    public String getStatus() {
        return this.status;
    }

    @Column(name = "data", nullable = false)
    public String getData() {
        return this.data;
    }

    @Column(name = "address_id", precision = 32)
    public Integer getAddressId() {
        return this.addressId;
    }

    @Column(name = "place_id", precision = 32)
    public Integer getPlaceId() {
        return this.placeId;
    }


    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Column(name = "lexems")
    public Object getLexems() {
        return this.lexems;
    }

    @Column(name = "location", length = 32)
    @Size(max = 32)
    public String getLocation() {
        return this.location;
    }

    @Column(name = "dph", nullable = false)
    public Boolean getDph() {
        return this.dph;
    }

    @Column(name = "product_id", precision = 32)
    public Integer getProductId() {
        return this.productId;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Services (");

        sb.append(id);
        sb.append(", ").append(customerId);
        sb.append(", ").append(periodFrom);
        sb.append(", ").append(periodTo);
        sb.append(", ").append(name);
        sb.append(", ").append(price);
        sb.append(", ").append(frequency);
        sb.append(", ").append(info);
        sb.append(", ").append(additionalname);
        sb.append(", ").append(status);
        sb.append(", ").append(data);
        sb.append(", ").append(addressId);
        sb.append(", ").append(placeId);
        sb.append(", ").append(lexems);
        sb.append(", ").append(location);
        sb.append(", ").append(dph);
        sb.append(", ").append(productId);

        sb.append(")");
        return sb.toString();
    }
}
