/*
 * This file is generated by jOOQ.
 */
package net.snet.crm.infra.db.command.tables.pojos;


import java.io.Serializable;
import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "customers", schema = "public", uniqueConstraints = {
    @UniqueConstraint(name = "customers_pkey", columnNames = {"id"}),
    @UniqueConstraint(name = "customers_history_id_key", columnNames = {"history_id"})
}, indexes = {
    @Index(name = "customers_history_id_key", unique = true, columnList = "history_id ASC"),
    @Index(name = "customers_pkey", unique = true, columnList = "id ASC"),
    @Index(name = "customers_search_idx", columnList = "lexems ASC")
})
public class Customers implements Serializable {

    private static final long serialVersionUID = -752567979;

    private final Long      id;
    private final Long      historyId;
    private final String    publicId;
    private final String    name;
    private final String    supplementaryName;
    private final String    street;
    private final String    city;
    private final String    postalCode;
    private final Integer   country;
    private final String    email;
    private final String    dic;
    private final String    contractNo;
    private final String    connectionSpot;
    private final Timestamp insertedOn;
    private final Integer   frequency;
    private final Timestamp lastlyBilled;
    private final Boolean   isBilledAfter;
    private final Boolean   deliverByEmail;
    private final String    deliverCopyEmail;
    private final Boolean   deliverByMail;
    private final Boolean   isAutoBilling;
    private final String    info;
    private final String    contactName;
    private final String    phone;
    private final Boolean   isActive;
    private final Integer   status;
    private final Long      shireId;
    private final Integer   format;
    private final Boolean   deliverSigned;
    private final String    symbol;
    private final Timestamp updated;
    private final Timestamp synchronized_;
    private final String    accountNo;
    private final String    bankNo;
    private final Integer   variable;
    private final String    customerStatus;
    private final Object    lexems;

    public Customers(Customers value) {
        this.id = value.id;
        this.historyId = value.historyId;
        this.publicId = value.publicId;
        this.name = value.name;
        this.supplementaryName = value.supplementaryName;
        this.street = value.street;
        this.city = value.city;
        this.postalCode = value.postalCode;
        this.country = value.country;
        this.email = value.email;
        this.dic = value.dic;
        this.contractNo = value.contractNo;
        this.connectionSpot = value.connectionSpot;
        this.insertedOn = value.insertedOn;
        this.frequency = value.frequency;
        this.lastlyBilled = value.lastlyBilled;
        this.isBilledAfter = value.isBilledAfter;
        this.deliverByEmail = value.deliverByEmail;
        this.deliverCopyEmail = value.deliverCopyEmail;
        this.deliverByMail = value.deliverByMail;
        this.isAutoBilling = value.isAutoBilling;
        this.info = value.info;
        this.contactName = value.contactName;
        this.phone = value.phone;
        this.isActive = value.isActive;
        this.status = value.status;
        this.shireId = value.shireId;
        this.format = value.format;
        this.deliverSigned = value.deliverSigned;
        this.symbol = value.symbol;
        this.updated = value.updated;
        this.synchronized_ = value.synchronized_;
        this.accountNo = value.accountNo;
        this.bankNo = value.bankNo;
        this.variable = value.variable;
        this.customerStatus = value.customerStatus;
        this.lexems = value.lexems;
    }

    public Customers(
        Long      id,
        Long      historyId,
        String    publicId,
        String    name,
        String    supplementaryName,
        String    street,
        String    city,
        String    postalCode,
        Integer   country,
        String    email,
        String    dic,
        String    contractNo,
        String    connectionSpot,
        Timestamp insertedOn,
        Integer   frequency,
        Timestamp lastlyBilled,
        Boolean   isBilledAfter,
        Boolean   deliverByEmail,
        String    deliverCopyEmail,
        Boolean   deliverByMail,
        Boolean   isAutoBilling,
        String    info,
        String    contactName,
        String    phone,
        Boolean   isActive,
        Integer   status,
        Long      shireId,
        Integer   format,
        Boolean   deliverSigned,
        String    symbol,
        Timestamp updated,
        Timestamp synchronized_,
        String    accountNo,
        String    bankNo,
        Integer   variable,
        String    customerStatus,
        Object    lexems
    ) {
        this.id = id;
        this.historyId = historyId;
        this.publicId = publicId;
        this.name = name;
        this.supplementaryName = supplementaryName;
        this.street = street;
        this.city = city;
        this.postalCode = postalCode;
        this.country = country;
        this.email = email;
        this.dic = dic;
        this.contractNo = contractNo;
        this.connectionSpot = connectionSpot;
        this.insertedOn = insertedOn;
        this.frequency = frequency;
        this.lastlyBilled = lastlyBilled;
        this.isBilledAfter = isBilledAfter;
        this.deliverByEmail = deliverByEmail;
        this.deliverCopyEmail = deliverCopyEmail;
        this.deliverByMail = deliverByMail;
        this.isAutoBilling = isAutoBilling;
        this.info = info;
        this.contactName = contactName;
        this.phone = phone;
        this.isActive = isActive;
        this.status = status;
        this.shireId = shireId;
        this.format = format;
        this.deliverSigned = deliverSigned;
        this.symbol = symbol;
        this.updated = updated;
        this.synchronized_ = synchronized_;
        this.accountNo = accountNo;
        this.bankNo = bankNo;
        this.variable = variable;
        this.customerStatus = customerStatus;
        this.lexems = lexems;
    }

    @Id
    @Column(name = "id", nullable = false, precision = 64)
    @NotNull
    public Long getId() {
        return this.id;
    }

    @Column(name = "history_id", nullable = false, precision = 64)
    @NotNull
    public Long getHistoryId() {
        return this.historyId;
    }

    @Column(name = "public_id", nullable = false, length = 20)
    @NotNull
    @Size(max = 20)
    public String getPublicId() {
        return this.publicId;
    }

    @Column(name = "name", nullable = false, length = 80)
    @NotNull
    @Size(max = 80)
    public String getName() {
        return this.name;
    }

    @Column(name = "supplementary_name", length = 50)
    @Size(max = 50)
    public String getSupplementaryName() {
        return this.supplementaryName;
    }

    @Column(name = "street", length = 40)
    @Size(max = 40)
    public String getStreet() {
        return this.street;
    }

    @Column(name = "city", length = 40)
    @Size(max = 40)
    public String getCity() {
        return this.city;
    }

    @Column(name = "postal_code", length = 10)
    @Size(max = 10)
    public String getPostalCode() {
        return this.postalCode;
    }

    @Column(name = "country", precision = 32)
    public Integer getCountry() {
        return this.country;
    }

    @Column(name = "email", length = 50)
    @Size(max = 50)
    public String getEmail() {
        return this.email;
    }

    @Column(name = "dic", length = 20)
    @Size(max = 20)
    public String getDic() {
        return this.dic;
    }

    @Column(name = "contract_no", length = 50)
    @Size(max = 50)
    public String getContractNo() {
        return this.contractNo;
    }

    @Column(name = "connection_spot", length = 100)
    @Size(max = 100)
    public String getConnectionSpot() {
        return this.connectionSpot;
    }

    @Column(name = "inserted_on", nullable = false)
    @NotNull
    public Timestamp getInsertedOn() {
        return this.insertedOn;
    }

    @Column(name = "frequency", precision = 32)
    public Integer getFrequency() {
        return this.frequency;
    }

    @Column(name = "lastly_billed")
    public Timestamp getLastlyBilled() {
        return this.lastlyBilled;
    }

    @Column(name = "is_billed_after")
    public Boolean getIsBilledAfter() {
        return this.isBilledAfter;
    }

    @Column(name = "deliver_by_email")
    public Boolean getDeliverByEmail() {
        return this.deliverByEmail;
    }

    @Column(name = "deliver_copy_email", length = 100)
    @Size(max = 100)
    public String getDeliverCopyEmail() {
        return this.deliverCopyEmail;
    }

    @Column(name = "deliver_by_mail")
    public Boolean getDeliverByMail() {
        return this.deliverByMail;
    }

    @Column(name = "is_auto_billing")
    public Boolean getIsAutoBilling() {
        return this.isAutoBilling;
    }

    @Column(name = "info", length = 150)
    @Size(max = 150)
    public String getInfo() {
        return this.info;
    }

    @Column(name = "contact_name", length = 50)
    @Size(max = 50)
    public String getContactName() {
        return this.contactName;
    }

    @Column(name = "phone", length = 60)
    @Size(max = 60)
    public String getPhone() {
        return this.phone;
    }

    @Column(name = "is_active")
    public Boolean getIsActive() {
        return this.isActive;
    }

    @Column(name = "status", precision = 32)
    public Integer getStatus() {
        return this.status;
    }

    @Column(name = "shire_id", precision = 64)
    public Long getShireId() {
        return this.shireId;
    }

    @Column(name = "format", precision = 32)
    public Integer getFormat() {
        return this.format;
    }

    @Column(name = "deliver_signed")
    public Boolean getDeliverSigned() {
        return this.deliverSigned;
    }

    @Column(name = "symbol", length = 20)
    @Size(max = 20)
    public String getSymbol() {
        return this.symbol;
    }

    @Column(name = "updated")
    public Timestamp getUpdated() {
        return this.updated;
    }

    @Column(name = "synchronized")
    public Timestamp getSynchronized() {
        return this.synchronized_;
    }

    @Column(name = "account_no", length = 26)
    @Size(max = 26)
    public String getAccountNo() {
        return this.accountNo;
    }

    @Column(name = "bank_no", length = 4)
    @Size(max = 4)
    public String getBankNo() {
        return this.bankNo;
    }

    @Column(name = "variable", precision = 32)
    public Integer getVariable() {
        return this.variable;
    }

    @Column(name = "customer_status", nullable = false, length = 16)
    @Size(max = 16)
    public String getCustomerStatus() {
        return this.customerStatus;
    }


    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Column(name = "lexems")
    public Object getLexems() {
        return this.lexems;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Customers (");

        sb.append(id);
        sb.append(", ").append(historyId);
        sb.append(", ").append(publicId);
        sb.append(", ").append(name);
        sb.append(", ").append(supplementaryName);
        sb.append(", ").append(street);
        sb.append(", ").append(city);
        sb.append(", ").append(postalCode);
        sb.append(", ").append(country);
        sb.append(", ").append(email);
        sb.append(", ").append(dic);
        sb.append(", ").append(contractNo);
        sb.append(", ").append(connectionSpot);
        sb.append(", ").append(insertedOn);
        sb.append(", ").append(frequency);
        sb.append(", ").append(lastlyBilled);
        sb.append(", ").append(isBilledAfter);
        sb.append(", ").append(deliverByEmail);
        sb.append(", ").append(deliverCopyEmail);
        sb.append(", ").append(deliverByMail);
        sb.append(", ").append(isAutoBilling);
        sb.append(", ").append(info);
        sb.append(", ").append(contactName);
        sb.append(", ").append(phone);
        sb.append(", ").append(isActive);
        sb.append(", ").append(status);
        sb.append(", ").append(shireId);
        sb.append(", ").append(format);
        sb.append(", ").append(deliverSigned);
        sb.append(", ").append(symbol);
        sb.append(", ").append(updated);
        sb.append(", ").append(synchronized_);
        sb.append(", ").append(accountNo);
        sb.append(", ").append(bankNo);
        sb.append(", ").append(variable);
        sb.append(", ").append(customerStatus);
        sb.append(", ").append(lexems);

        sb.append(")");
        return sb.toString();
    }
}
