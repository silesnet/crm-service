/*
 * This file is generated by jOOQ.
 */
package net.snet.crm.infra.db.command.tables.daos;


import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import net.snet.crm.infra.db.command.tables.Network;
import net.snet.crm.infra.db.command.tables.records.NetworkRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NetworkDao extends DAOImpl<NetworkRecord, net.snet.crm.infra.db.command.tables.pojos.Network, Integer> {

    /**
     * Create a new NetworkDao without any configuration
     */
    public NetworkDao() {
        super(Network.NETWORK, net.snet.crm.infra.db.command.tables.pojos.Network.class);
    }

    /**
     * Create a new NetworkDao with an attached configuration
     */
    public NetworkDao(Configuration configuration) {
        super(Network.NETWORK, net.snet.crm.infra.db.command.tables.pojos.Network.class, configuration);
    }

    @Override
    public Integer getId(net.snet.crm.infra.db.command.tables.pojos.Network object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Network.NETWORK.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchById(Integer... values) {
        return fetch(Network.NETWORK.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public net.snet.crm.infra.db.command.tables.pojos.Network fetchOneById(Integer value) {
        return fetchOne(Network.NETWORK.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByName(String... values) {
        return fetch(Network.NETWORK.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public net.snet.crm.infra.db.command.tables.pojos.Network fetchOneByName(String value) {
        return fetchOne(Network.NETWORK.NAME, value);
    }

    /**
     * Fetch records that have <code>info BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfInfo(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.INFO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>info IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByInfo(String... values) {
        return fetch(Network.NETWORK.INFO, values);
    }

    /**
     * Fetch records that have <code>active BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfActive(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Network.NETWORK.ACTIVE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>active IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByActive(Boolean... values) {
        return fetch(Network.NETWORK.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfType(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Network.NETWORK.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByType(Integer... values) {
        return fetch(Network.NETWORK.TYPE, values);
    }

    /**
     * Fetch records that have <code>mode BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfMode(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Network.NETWORK.MODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mode IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByMode(Integer... values) {
        return fetch(Network.NETWORK.MODE, values);
    }

    /**
     * Fetch records that have <code>wds BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfWds(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Network.NETWORK.WDS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>wds IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByWds(Boolean... values) {
        return fetch(Network.NETWORK.WDS, values);
    }

    /**
     * Fetch records that have <code>frequency BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfFrequency(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Network.NETWORK.FREQUENCY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>frequency IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByFrequency(Integer... values) {
        return fetch(Network.NETWORK.FREQUENCY, values);
    }

    /**
     * Fetch records that have <code>vendor BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfVendor(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.VENDOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>vendor IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByVendor(String... values) {
        return fetch(Network.NETWORK.VENDOR, values);
    }

    /**
     * Fetch records that have <code>azimuth BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfAzimuth(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.AZIMUTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>azimuth IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByAzimuth(String... values) {
        return fetch(Network.NETWORK.AZIMUTH, values);
    }

    /**
     * Fetch records that have <code>ssid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfSsid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.SSID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ssid IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchBySsid(String... values) {
        return fetch(Network.NETWORK.SSID, values);
    }

    /**
     * Fetch records that have <code>auth BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfAuth(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.AUTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auth IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByAuth(String... values) {
        return fetch(Network.NETWORK.AUTH, values);
    }

    /**
     * Fetch records that have <code>polarization BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfPolarization(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Network.NETWORK.POLARIZATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>polarization IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByPolarization(Integer... values) {
        return fetch(Network.NETWORK.POLARIZATION, values);
    }

    /**
     * Fetch records that have <code>country BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfCountry(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Network.NETWORK.COUNTRY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByCountry(Integer... values) {
        return fetch(Network.NETWORK.COUNTRY, values);
    }

    /**
     * Fetch records that have <code>norm BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfNorm(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.NORM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>norm IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByNorm(String... values) {
        return fetch(Network.NETWORK.NORM, values);
    }

    /**
     * Fetch records that have <code>area BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfArea(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.AREA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>area IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByArea(String... values) {
        return fetch(Network.NETWORK.AREA, values);
    }

    /**
     * Fetch records that have <code>aggregation BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfAggregation(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Network.NETWORK.AGGREGATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>aggregation IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByAggregation(Boolean... values) {
        return fetch(Network.NETWORK.AGGREGATION, values);
    }

    /**
     * Fetch records that have <code>width BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfWidth(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.WIDTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>width IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByWidth(String... values) {
        return fetch(Network.NETWORK.WIDTH, values);
    }

    /**
     * Fetch records that have <code>antenna BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfAntenna(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.ANTENNA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>antenna IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByAntenna(String... values) {
        return fetch(Network.NETWORK.ANTENNA, values);
    }

    /**
     * Fetch records that have <code>power BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfPower(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.POWER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>power IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByPower(String... values) {
        return fetch(Network.NETWORK.POWER, values);
    }

    /**
     * Fetch records that have <code>master BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfMaster(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.MASTER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>master IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByMaster(String... values) {
        return fetch(Network.NETWORK.MASTER, values);
    }

    /**
     * Fetch records that have <code>linkto BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfLinkto(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.LINKTO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>linkto IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByLinkto(String... values) {
        return fetch(Network.NETWORK.LINKTO, values);
    }

    /**
     * Fetch records that have <code>hardware BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfHardware(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.HARDWARE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hardware IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByHardware(String... values) {
        return fetch(Network.NETWORK.HARDWARE, values);
    }

    /**
     * Fetch records that have <code>tdma BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfTdma(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Network.NETWORK.TDMA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tdma IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByTdma(Boolean... values) {
        return fetch(Network.NETWORK.TDMA, values);
    }

    /**
     * Fetch records that have <code>latitude BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfLatitude(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.LATITUDE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>latitude IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByLatitude(String... values) {
        return fetch(Network.NETWORK.LATITUDE, values);
    }

    /**
     * Fetch records that have <code>longitude BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfLongitude(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.LONGITUDE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>longitude IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByLongitude(String... values) {
        return fetch(Network.NETWORK.LONGITUDE, values);
    }

    /**
     * Fetch records that have <code>r_updatetime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfRUpdatetime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Network.NETWORK.R_UPDATETIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>r_updatetime IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByRUpdatetime(Timestamp... values) {
        return fetch(Network.NETWORK.R_UPDATETIME, values);
    }

    /**
     * Fetch records that have <code>r_firmware BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfRFirmware(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.R_FIRMWARE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>r_firmware IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByRFirmware(String... values) {
        return fetch(Network.NETWORK.R_FIRMWARE, values);
    }

    /**
     * Fetch records that have <code>r_platform BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfRPlatform(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.R_PLATFORM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>r_platform IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByRPlatform(String... values) {
        return fetch(Network.NETWORK.R_PLATFORM, values);
    }

    /**
     * Fetch records that have <code>r_signal BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfRSignal(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.R_SIGNAL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>r_signal IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByRSignal(String... values) {
        return fetch(Network.NETWORK.R_SIGNAL, values);
    }

    /**
     * Fetch records that have <code>r_ccq BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfRCcq(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.R_CCQ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>r_ccq IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByRCcq(String... values) {
        return fetch(Network.NETWORK.R_CCQ, values);
    }

    /**
     * Fetch records that have <code>r_txrate BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfRTxrate(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.R_TXRATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>r_txrate IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByRTxrate(String... values) {
        return fetch(Network.NETWORK.R_TXRATE, values);
    }

    /**
     * Fetch records that have <code>r_rxrate BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfRRxrate(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.R_RXRATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>r_rxrate IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByRRxrate(String... values) {
        return fetch(Network.NETWORK.R_RXRATE, values);
    }

    /**
     * Fetch records that have <code>r_quality BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfRQuality(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.R_QUALITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>r_quality IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByRQuality(String... values) {
        return fetch(Network.NETWORK.R_QUALITY, values);
    }

    /**
     * Fetch records that have <code>r_capacity BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfRCapacity(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.R_CAPACITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>r_capacity IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByRCapacity(String... values) {
        return fetch(Network.NETWORK.R_CAPACITY, values);
    }

    /**
     * Fetch records that have <code>r_lanspeed BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfRLanspeed(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.R_LANSPEED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>r_lanspeed IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByRLanspeed(String... values) {
        return fetch(Network.NETWORK.R_LANSPEED, values);
    }

    /**
     * Fetch records that have <code>r_txpower BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfRTxpower(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.R_TXPOWER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>r_txpower IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByRTxpower(String... values) {
        return fetch(Network.NETWORK.R_TXPOWER, values);
    }

    /**
     * Fetch records that have <code>monitoring BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfMonitoring(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.MONITORING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>monitoring IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByMonitoring(String... values) {
        return fetch(Network.NETWORK.MONITORING, values);
    }

    /**
     * Fetch records that have <code>traceroute BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfTraceroute(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.TRACEROUTE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>traceroute IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByTraceroute(String... values) {
        return fetch(Network.NETWORK.TRACEROUTE, values);
    }

    /**
     * Fetch records that have <code>ping BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfPing(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.PING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ping IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByPing(String... values) {
        return fetch(Network.NETWORK.PING, values);
    }

    /**
     * Fetch records that have <code>r_frequency BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfRFrequency(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Network.NETWORK.R_FREQUENCY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>r_frequency IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByRFrequency(Integer... values) {
        return fetch(Network.NETWORK.R_FREQUENCY, values);
    }

    /**
     * Fetch records that have <code>model BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfModel(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.MODEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>model IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByModel(String... values) {
        return fetch(Network.NETWORK.MODEL, values);
    }

    /**
     * Fetch records that have <code>uplink_port BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfUplinkPort(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.UPLINK_PORT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uplink_port IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByUplinkPort(String... values) {
        return fetch(Network.NETWORK.UPLINK_PORT, values);
    }

    /**
     * Fetch records that have <code>rstp_num_ring BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfRstpNumRing(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Network.NETWORK.RSTP_NUM_RING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rstp_num_ring IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByRstpNumRing(Integer... values) {
        return fetch(Network.NETWORK.RSTP_NUM_RING, values);
    }

    /**
     * Fetch records that have <code>uplink_sfp_tx BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfUplinkSfpTx(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Network.NETWORK.UPLINK_SFP_TX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uplink_sfp_tx IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByUplinkSfpTx(Integer... values) {
        return fetch(Network.NETWORK.UPLINK_SFP_TX, values);
    }

    /**
     * Fetch records that have <code>linkto_port BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfLinktoPort(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.LINKTO_PORT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>linkto_port IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByLinktoPort(String... values) {
        return fetch(Network.NETWORK.LINKTO_PORT, values);
    }

    /**
     * Fetch records that have <code>service BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfService(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Network.NETWORK.SERVICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>service IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByService(Integer... values) {
        return fetch(Network.NETWORK.SERVICE, values);
    }

    /**
     * Fetch records that have <code>port_info BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfPortInfo(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.PORT_INFO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>port_info IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByPortInfo(String... values) {
        return fetch(Network.NETWORK.PORT_INFO, values);
    }

    /**
     * Fetch records that have <code>zbx_groups BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfZbxGroups(String lowerInclusive, String upperInclusive) {
        return fetchRange(Network.NETWORK.ZBX_GROUPS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>zbx_groups IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByZbxGroups(String... values) {
        return fetch(Network.NETWORK.ZBX_GROUPS, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchRangeOfVersion(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Network.NETWORK.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Network> fetchByVersion(Integer... values) {
        return fetch(Network.NETWORK.VERSION, values);
    }
}
