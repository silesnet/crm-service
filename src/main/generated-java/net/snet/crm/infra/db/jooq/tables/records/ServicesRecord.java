/*
 * This file is generated by jOOQ.
 */
package net.snet.crm.infra.db.jooq.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import net.snet.crm.infra.db.jooq.tables.Services;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record17;
import org.jooq.Row17;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "services", schema = "public", uniqueConstraints = {
    @UniqueConstraint(name = "services_pkey", columnNames = {"id"})
}, indexes = {
    @Index(name = "customer_index2", columnList = "customer_id ASC"),
    @Index(name = "services_pkey", unique = true, columnList = "id ASC"),
    @Index(name = "services_search_idx", columnList = "lexems ASC")
})
public class ServicesRecord extends UpdatableRecordImpl<ServicesRecord> implements Record17<Long, Long, Timestamp, Timestamp, String, Integer, Integer, String, String, String, String, Integer, Integer, Object, String, Boolean, Integer> {

    private static final long serialVersionUID = -695332676;

    /**
     * Setter for <code>public.services.id</code>.
     */
    public ServicesRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.services.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false, precision = 64)
    @NotNull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.services.customer_id</code>.
     */
    public ServicesRecord setCustomerId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.services.customer_id</code>.
     */
    @Column(name = "customer_id", precision = 64)
    public Long getCustomerId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.services.period_from</code>.
     */
    public ServicesRecord setPeriodFrom(Timestamp value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.services.period_from</code>.
     */
    @Column(name = "period_from", nullable = false)
    @NotNull
    public Timestamp getPeriodFrom() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>public.services.period_to</code>.
     */
    public ServicesRecord setPeriodTo(Timestamp value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.services.period_to</code>.
     */
    @Column(name = "period_to")
    public Timestamp getPeriodTo() {
        return (Timestamp) get(3);
    }

    /**
     * Setter for <code>public.services.name</code>.
     */
    public ServicesRecord setName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.services.name</code>.
     */
    @Column(name = "name", nullable = false, length = 70)
    @NotNull
    @Size(max = 70)
    public String getName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.services.price</code>.
     */
    public ServicesRecord setPrice(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.services.price</code>.
     */
    @Column(name = "price", nullable = false, precision = 32)
    @NotNull
    public Integer getPrice() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>public.services.frequency</code>.
     */
    public ServicesRecord setFrequency(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.services.frequency</code>.
     */
    @Column(name = "frequency", precision = 32)
    public Integer getFrequency() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>public.services.info</code>.
     */
    public ServicesRecord setInfo(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.services.info</code>.
     */
    @Column(name = "info", length = 512)
    @Size(max = 512)
    public String getInfo() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.services.additionalname</code>.
     */
    public ServicesRecord setAdditionalname(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.services.additionalname</code>.
     */
    @Column(name = "additionalname", length = 50)
    @Size(max = 50)
    public String getAdditionalname() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.services.status</code>.
     */
    public ServicesRecord setStatus(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.services.status</code>.
     */
    @Column(name = "status", nullable = false)
    public String getStatus() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.services.data</code>.
     */
    public ServicesRecord setData(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.services.data</code>.
     */
    @Column(name = "data", nullable = false)
    public String getData() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.services.address_id</code>.
     */
    public ServicesRecord setAddressId(Integer value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.services.address_id</code>.
     */
    @Column(name = "address_id", precision = 32)
    public Integer getAddressId() {
        return (Integer) get(11);
    }

    /**
     * Setter for <code>public.services.place_id</code>.
     */
    public ServicesRecord setPlaceId(Integer value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.services.place_id</code>.
     */
    @Column(name = "place_id", precision = 32)
    public Integer getPlaceId() {
        return (Integer) get(12);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public ServicesRecord setLexems(Object value) {
        set(13, value);
        return this;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Column(name = "lexems")
    public Object getLexems() {
        return get(13);
    }

    /**
     * Setter for <code>public.services.location</code>.
     */
    public ServicesRecord setLocation(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>public.services.location</code>.
     */
    @Column(name = "location", length = 32)
    @Size(max = 32)
    public String getLocation() {
        return (String) get(14);
    }

    /**
     * Setter for <code>public.services.dph</code>.
     */
    public ServicesRecord setDph(Boolean value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>public.services.dph</code>.
     */
    @Column(name = "dph", nullable = false)
    public Boolean getDph() {
        return (Boolean) get(15);
    }

    /**
     * Setter for <code>public.services.product_id</code>.
     */
    public ServicesRecord setProductId(Integer value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>public.services.product_id</code>.
     */
    @Column(name = "product_id", precision = 32)
    public Integer getProductId() {
        return (Integer) get(16);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record17 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, Long, Timestamp, Timestamp, String, Integer, Integer, String, String, String, String, Integer, Integer, Object, String, Boolean, Integer> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    @Override
    public Row17<Long, Long, Timestamp, Timestamp, String, Integer, Integer, String, String, String, String, Integer, Integer, Object, String, Boolean, Integer> valuesRow() {
        return (Row17) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Services.SERVICES.ID;
    }

    @Override
    public Field<Long> field2() {
        return Services.SERVICES.CUSTOMER_ID;
    }

    @Override
    public Field<Timestamp> field3() {
        return Services.SERVICES.PERIOD_FROM;
    }

    @Override
    public Field<Timestamp> field4() {
        return Services.SERVICES.PERIOD_TO;
    }

    @Override
    public Field<String> field5() {
        return Services.SERVICES.NAME;
    }

    @Override
    public Field<Integer> field6() {
        return Services.SERVICES.PRICE;
    }

    @Override
    public Field<Integer> field7() {
        return Services.SERVICES.FREQUENCY;
    }

    @Override
    public Field<String> field8() {
        return Services.SERVICES.INFO;
    }

    @Override
    public Field<String> field9() {
        return Services.SERVICES.ADDITIONALNAME;
    }

    @Override
    public Field<String> field10() {
        return Services.SERVICES.STATUS;
    }

    @Override
    public Field<String> field11() {
        return Services.SERVICES.DATA;
    }

    @Override
    public Field<Integer> field12() {
        return Services.SERVICES.ADDRESS_ID;
    }

    @Override
    public Field<Integer> field13() {
        return Services.SERVICES.PLACE_ID;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Field<Object> field14() {
        return Services.SERVICES.LEXEMS;
    }

    @Override
    public Field<String> field15() {
        return Services.SERVICES.LOCATION;
    }

    @Override
    public Field<Boolean> field16() {
        return Services.SERVICES.DPH;
    }

    @Override
    public Field<Integer> field17() {
        return Services.SERVICES.PRODUCT_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getCustomerId();
    }

    @Override
    public Timestamp component3() {
        return getPeriodFrom();
    }

    @Override
    public Timestamp component4() {
        return getPeriodTo();
    }

    @Override
    public String component5() {
        return getName();
    }

    @Override
    public Integer component6() {
        return getPrice();
    }

    @Override
    public Integer component7() {
        return getFrequency();
    }

    @Override
    public String component8() {
        return getInfo();
    }

    @Override
    public String component9() {
        return getAdditionalname();
    }

    @Override
    public String component10() {
        return getStatus();
    }

    @Override
    public String component11() {
        return getData();
    }

    @Override
    public Integer component12() {
        return getAddressId();
    }

    @Override
    public Integer component13() {
        return getPlaceId();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object component14() {
        return getLexems();
    }

    @Override
    public String component15() {
        return getLocation();
    }

    @Override
    public Boolean component16() {
        return getDph();
    }

    @Override
    public Integer component17() {
        return getProductId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getCustomerId();
    }

    @Override
    public Timestamp value3() {
        return getPeriodFrom();
    }

    @Override
    public Timestamp value4() {
        return getPeriodTo();
    }

    @Override
    public String value5() {
        return getName();
    }

    @Override
    public Integer value6() {
        return getPrice();
    }

    @Override
    public Integer value7() {
        return getFrequency();
    }

    @Override
    public String value8() {
        return getInfo();
    }

    @Override
    public String value9() {
        return getAdditionalname();
    }

    @Override
    public String value10() {
        return getStatus();
    }

    @Override
    public String value11() {
        return getData();
    }

    @Override
    public Integer value12() {
        return getAddressId();
    }

    @Override
    public Integer value13() {
        return getPlaceId();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object value14() {
        return getLexems();
    }

    @Override
    public String value15() {
        return getLocation();
    }

    @Override
    public Boolean value16() {
        return getDph();
    }

    @Override
    public Integer value17() {
        return getProductId();
    }

    @Override
    public ServicesRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ServicesRecord value2(Long value) {
        setCustomerId(value);
        return this;
    }

    @Override
    public ServicesRecord value3(Timestamp value) {
        setPeriodFrom(value);
        return this;
    }

    @Override
    public ServicesRecord value4(Timestamp value) {
        setPeriodTo(value);
        return this;
    }

    @Override
    public ServicesRecord value5(String value) {
        setName(value);
        return this;
    }

    @Override
    public ServicesRecord value6(Integer value) {
        setPrice(value);
        return this;
    }

    @Override
    public ServicesRecord value7(Integer value) {
        setFrequency(value);
        return this;
    }

    @Override
    public ServicesRecord value8(String value) {
        setInfo(value);
        return this;
    }

    @Override
    public ServicesRecord value9(String value) {
        setAdditionalname(value);
        return this;
    }

    @Override
    public ServicesRecord value10(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public ServicesRecord value11(String value) {
        setData(value);
        return this;
    }

    @Override
    public ServicesRecord value12(Integer value) {
        setAddressId(value);
        return this;
    }

    @Override
    public ServicesRecord value13(Integer value) {
        setPlaceId(value);
        return this;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public ServicesRecord value14(Object value) {
        setLexems(value);
        return this;
    }

    @Override
    public ServicesRecord value15(String value) {
        setLocation(value);
        return this;
    }

    @Override
    public ServicesRecord value16(Boolean value) {
        setDph(value);
        return this;
    }

    @Override
    public ServicesRecord value17(Integer value) {
        setProductId(value);
        return this;
    }

    @Override
    public ServicesRecord values(Long value1, Long value2, Timestamp value3, Timestamp value4, String value5, Integer value6, Integer value7, String value8, String value9, String value10, String value11, Integer value12, Integer value13, Object value14, String value15, Boolean value16, Integer value17) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ServicesRecord
     */
    public ServicesRecord() {
        super(Services.SERVICES);
    }

    /**
     * Create a detached, initialised ServicesRecord
     */
    public ServicesRecord(Long id, Long customerId, Timestamp periodFrom, Timestamp periodTo, String name, Integer price, Integer frequency, String info, String additionalname, String status, String data, Integer addressId, Integer placeId, Object lexems, String location, Boolean dph, Integer productId) {
        super(Services.SERVICES);

        set(0, id);
        set(1, customerId);
        set(2, periodFrom);
        set(3, periodTo);
        set(4, name);
        set(5, price);
        set(6, frequency);
        set(7, info);
        set(8, additionalname);
        set(9, status);
        set(10, data);
        set(11, addressId);
        set(12, placeId);
        set(13, lexems);
        set(14, location);
        set(15, dph);
        set(16, productId);
    }
}
