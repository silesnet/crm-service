/*
 * This file is generated by jOOQ.
 */
package net.snet.crm.infra.db.command.tables.daos;


import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import net.snet.crm.infra.db.command.tables.Services;
import net.snet.crm.infra.db.command.tables.records.ServicesRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServicesDao extends DAOImpl<ServicesRecord, net.snet.crm.infra.db.command.tables.pojos.Services, Long> {

    /**
     * Create a new ServicesDao without any configuration
     */
    public ServicesDao() {
        super(Services.SERVICES, net.snet.crm.infra.db.command.tables.pojos.Services.class);
    }

    /**
     * Create a new ServicesDao with an attached configuration
     */
    public ServicesDao(Configuration configuration) {
        super(Services.SERVICES, net.snet.crm.infra.db.command.tables.pojos.Services.class, configuration);
    }

    @Override
    public Long getId(net.snet.crm.infra.db.command.tables.pojos.Services object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Services.SERVICES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchById(Long... values) {
        return fetch(Services.SERVICES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public net.snet.crm.infra.db.command.tables.pojos.Services fetchOneById(Long value) {
        return fetchOne(Services.SERVICES.ID, value);
    }

    /**
     * Fetch records that have <code>customer_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfCustomerId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Services.SERVICES.CUSTOMER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>customer_id IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByCustomerId(Long... values) {
        return fetch(Services.SERVICES.CUSTOMER_ID, values);
    }

    /**
     * Fetch records that have <code>period_from BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfPeriodFrom(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Services.SERVICES.PERIOD_FROM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>period_from IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByPeriodFrom(Timestamp... values) {
        return fetch(Services.SERVICES.PERIOD_FROM, values);
    }

    /**
     * Fetch records that have <code>period_to BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfPeriodTo(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Services.SERVICES.PERIOD_TO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>period_to IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByPeriodTo(Timestamp... values) {
        return fetch(Services.SERVICES.PERIOD_TO, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Services.SERVICES.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByName(String... values) {
        return fetch(Services.SERVICES.NAME, values);
    }

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfPrice(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Services.SERVICES.PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByPrice(Integer... values) {
        return fetch(Services.SERVICES.PRICE, values);
    }

    /**
     * Fetch records that have <code>frequency BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfFrequency(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Services.SERVICES.FREQUENCY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>frequency IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByFrequency(Integer... values) {
        return fetch(Services.SERVICES.FREQUENCY, values);
    }

    /**
     * Fetch records that have <code>info BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfInfo(String lowerInclusive, String upperInclusive) {
        return fetchRange(Services.SERVICES.INFO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>info IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByInfo(String... values) {
        return fetch(Services.SERVICES.INFO, values);
    }

    /**
     * Fetch records that have <code>additionalname BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfAdditionalname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Services.SERVICES.ADDITIONALNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>additionalname IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByAdditionalname(String... values) {
        return fetch(Services.SERVICES.ADDITIONALNAME, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(Services.SERVICES.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByStatus(String... values) {
        return fetch(Services.SERVICES.STATUS, values);
    }

    /**
     * Fetch records that have <code>data BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfData(String lowerInclusive, String upperInclusive) {
        return fetchRange(Services.SERVICES.DATA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>data IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByData(String... values) {
        return fetch(Services.SERVICES.DATA, values);
    }

    /**
     * Fetch records that have <code>address_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfAddressId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Services.SERVICES.ADDRESS_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address_id IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByAddressId(Integer... values) {
        return fetch(Services.SERVICES.ADDRESS_ID, values);
    }

    /**
     * Fetch records that have <code>place_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfPlaceId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Services.SERVICES.PLACE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>place_id IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByPlaceId(Integer... values) {
        return fetch(Services.SERVICES.PLACE_ID, values);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfLexems(Object lowerInclusive, Object upperInclusive) {
        return fetchRange(Services.SERVICES.LEXEMS, lowerInclusive, upperInclusive);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByLexems(Object... values) {
        return fetch(Services.SERVICES.LEXEMS, values);
    }

    /**
     * Fetch records that have <code>location BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfLocation(String lowerInclusive, String upperInclusive) {
        return fetchRange(Services.SERVICES.LOCATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>location IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByLocation(String... values) {
        return fetch(Services.SERVICES.LOCATION, values);
    }

    /**
     * Fetch records that have <code>dph BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfDph(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Services.SERVICES.DPH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dph IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByDph(Boolean... values) {
        return fetch(Services.SERVICES.DPH, values);
    }

    /**
     * Fetch records that have <code>product_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchRangeOfProductId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Services.SERVICES.PRODUCT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_id IN (values)</code>
     */
    public List<net.snet.crm.infra.db.command.tables.pojos.Services> fetchByProductId(Integer... values) {
        return fetch(Services.SERVICES.PRODUCT_ID, values);
    }
}
