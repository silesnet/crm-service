/*
 * This file is generated by jOOQ.
 */
package net.snet.crm.infra.db.command.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import net.snet.crm.infra.db.command.Indexes;
import net.snet.crm.infra.db.command.Keys;
import net.snet.crm.infra.db.command.Public;
import net.snet.crm.infra.db.command.tables.records.ServicesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Services extends TableImpl<ServicesRecord> {

    private static final long serialVersionUID = -578134816;

    /**
     * The reference instance of <code>public.services</code>
     */
    public static final Services SERVICES = new Services();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServicesRecord> getRecordType() {
        return ServicesRecord.class;
    }

    /**
     * The column <code>public.services.id</code>.
     */
    public final TableField<ServicesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.services.customer_id</code>.
     */
    public final TableField<ServicesRecord, Long> CUSTOMER_ID = createField(DSL.name("customer_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.services.period_from</code>.
     */
    public final TableField<ServicesRecord, Timestamp> PERIOD_FROM = createField(DSL.name("period_from"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.services.period_to</code>.
     */
    public final TableField<ServicesRecord, Timestamp> PERIOD_TO = createField(DSL.name("period_to"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.services.name</code>.
     */
    public final TableField<ServicesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(70).nullable(false), this, "");

    /**
     * The column <code>public.services.price</code>.
     */
    public final TableField<ServicesRecord, Integer> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.services.frequency</code>.
     */
    public final TableField<ServicesRecord, Integer> FREQUENCY = createField(DSL.name("frequency"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.services.info</code>.
     */
    public final TableField<ServicesRecord, String> INFO = createField(DSL.name("info"), org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>public.services.additionalname</code>.
     */
    public final TableField<ServicesRecord, String> ADDITIONALNAME = createField(DSL.name("additionalname"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.services.status</code>.
     */
    public final TableField<ServicesRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("'ACTIVE'::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.services.data</code>.
     */
    public final TableField<ServicesRecord, String> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("'{}'::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.services.address_id</code>.
     */
    public final TableField<ServicesRecord, Integer> ADDRESS_ID = createField(DSL.name("address_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.services.place_id</code>.
     */
    public final TableField<ServicesRecord, Integer> PLACE_ID = createField(DSL.name("place_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<ServicesRecord, Object> LEXEMS = createField(DSL.name("lexems"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tsvector\""), this, "");

    /**
     * The column <code>public.services.location</code>.
     */
    public final TableField<ServicesRecord, String> LOCATION = createField(DSL.name("location"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.services.dph</code>.
     */
    public final TableField<ServicesRecord, Boolean> DPH = createField(DSL.name("dph"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.services.product_id</code>.
     */
    public final TableField<ServicesRecord, Integer> PRODUCT_ID = createField(DSL.name("product_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.services</code> table reference
     */
    public Services() {
        this(DSL.name("services"), null);
    }

    /**
     * Create an aliased <code>public.services</code> table reference
     */
    public Services(String alias) {
        this(DSL.name(alias), SERVICES);
    }

    /**
     * Create an aliased <code>public.services</code> table reference
     */
    public Services(Name alias) {
        this(alias, SERVICES);
    }

    private Services(Name alias, Table<ServicesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Services(Name alias, Table<ServicesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Services(Table<O> child, ForeignKey<O, ServicesRecord> key) {
        super(child, key, SERVICES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CUSTOMER_INDEX2, Indexes.SERVICES_PKEY, Indexes.SERVICES_SEARCH_IDX);
    }

    @Override
    public UniqueKey<ServicesRecord> getPrimaryKey() {
        return Keys.SERVICES_PKEY;
    }

    @Override
    public List<UniqueKey<ServicesRecord>> getKeys() {
        return Arrays.<UniqueKey<ServicesRecord>>asList(Keys.SERVICES_PKEY);
    }

    @Override
    public List<ForeignKey<ServicesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ServicesRecord, ?>>asList(Keys.SERVICES__FK5235105E31F2D3D);
    }

    public Customers customers() {
        return new Customers(this, Keys.SERVICES__FK5235105E31F2D3D);
    }

    @Override
    public Services as(String alias) {
        return new Services(DSL.name(alias), this);
    }

    @Override
    public Services as(Name alias) {
        return new Services(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Services rename(String name) {
        return new Services(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Services rename(Name name) {
        return new Services(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, Long, Timestamp, Timestamp, String, Integer, Integer, String, String, String, String, Integer, Integer, Object, String, Boolean, Integer> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
