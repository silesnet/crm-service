/*
 * This file is generated by jOOQ.
 */
package net.snet.crm.infra.db.command.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import net.snet.crm.infra.db.command.Indexes;
import net.snet.crm.infra.db.command.Keys;
import net.snet.crm.infra.db.command.Public;
import net.snet.crm.infra.db.command.tables.records.CustomersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customers extends TableImpl<CustomersRecord> {

    private static final long serialVersionUID = 1916722825;

    /**
     * The reference instance of <code>public.customers</code>
     */
    public static final Customers CUSTOMERS = new Customers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomersRecord> getRecordType() {
        return CustomersRecord.class;
    }

    /**
     * The column <code>public.customers.id</code>.
     */
    public final TableField<CustomersRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.customers.history_id</code>.
     */
    public final TableField<CustomersRecord, Long> HISTORY_ID = createField(DSL.name("history_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.customers.public_id</code>.
     */
    public final TableField<CustomersRecord, String> PUBLIC_ID = createField(DSL.name("public_id"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.customers.name</code>.
     */
    public final TableField<CustomersRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(80).nullable(false), this, "");

    /**
     * The column <code>public.customers.supplementary_name</code>.
     */
    public final TableField<CustomersRecord, String> SUPPLEMENTARY_NAME = createField(DSL.name("supplementary_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.customers.street</code>.
     */
    public final TableField<CustomersRecord, String> STREET = createField(DSL.name("street"), org.jooq.impl.SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>public.customers.city</code>.
     */
    public final TableField<CustomersRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>public.customers.postal_code</code>.
     */
    public final TableField<CustomersRecord, String> POSTAL_CODE = createField(DSL.name("postal_code"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.customers.country</code>.
     */
    public final TableField<CustomersRecord, Integer> COUNTRY = createField(DSL.name("country"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.customers.email</code>.
     */
    public final TableField<CustomersRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.customers.dic</code>.
     */
    public final TableField<CustomersRecord, String> DIC = createField(DSL.name("dic"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.customers.contract_no</code>.
     */
    public final TableField<CustomersRecord, String> CONTRACT_NO = createField(DSL.name("contract_no"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.customers.connection_spot</code>.
     */
    public final TableField<CustomersRecord, String> CONNECTION_SPOT = createField(DSL.name("connection_spot"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.customers.inserted_on</code>.
     */
    public final TableField<CustomersRecord, Timestamp> INSERTED_ON = createField(DSL.name("inserted_on"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.customers.frequency</code>.
     */
    public final TableField<CustomersRecord, Integer> FREQUENCY = createField(DSL.name("frequency"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.customers.lastly_billed</code>.
     */
    public final TableField<CustomersRecord, Timestamp> LASTLY_BILLED = createField(DSL.name("lastly_billed"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.customers.is_billed_after</code>.
     */
    public final TableField<CustomersRecord, Boolean> IS_BILLED_AFTER = createField(DSL.name("is_billed_after"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.customers.deliver_by_email</code>.
     */
    public final TableField<CustomersRecord, Boolean> DELIVER_BY_EMAIL = createField(DSL.name("deliver_by_email"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.customers.deliver_copy_email</code>.
     */
    public final TableField<CustomersRecord, String> DELIVER_COPY_EMAIL = createField(DSL.name("deliver_copy_email"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.customers.deliver_by_mail</code>.
     */
    public final TableField<CustomersRecord, Boolean> DELIVER_BY_MAIL = createField(DSL.name("deliver_by_mail"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.customers.is_auto_billing</code>.
     */
    public final TableField<CustomersRecord, Boolean> IS_AUTO_BILLING = createField(DSL.name("is_auto_billing"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.customers.info</code>.
     */
    public final TableField<CustomersRecord, String> INFO = createField(DSL.name("info"), org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>public.customers.contact_name</code>.
     */
    public final TableField<CustomersRecord, String> CONTACT_NAME = createField(DSL.name("contact_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.customers.phone</code>.
     */
    public final TableField<CustomersRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>public.customers.is_active</code>.
     */
    public final TableField<CustomersRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.customers.status</code>.
     */
    public final TableField<CustomersRecord, Integer> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.customers.shire_id</code>.
     */
    public final TableField<CustomersRecord, Long> SHIRE_ID = createField(DSL.name("shire_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.customers.format</code>.
     */
    public final TableField<CustomersRecord, Integer> FORMAT = createField(DSL.name("format"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.customers.deliver_signed</code>.
     */
    public final TableField<CustomersRecord, Boolean> DELIVER_SIGNED = createField(DSL.name("deliver_signed"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.customers.symbol</code>.
     */
    public final TableField<CustomersRecord, String> SYMBOL = createField(DSL.name("symbol"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.customers.updated</code>.
     */
    public final TableField<CustomersRecord, Timestamp> UPDATED = createField(DSL.name("updated"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.customers.synchronized</code>.
     */
    public final TableField<CustomersRecord, Timestamp> SYNCHRONIZED = createField(DSL.name("synchronized"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.customers.account_no</code>.
     */
    public final TableField<CustomersRecord, String> ACCOUNT_NO = createField(DSL.name("account_no"), org.jooq.impl.SQLDataType.VARCHAR(26), this, "");

    /**
     * The column <code>public.customers.bank_no</code>.
     */
    public final TableField<CustomersRecord, String> BANK_NO = createField(DSL.name("bank_no"), org.jooq.impl.SQLDataType.VARCHAR(4), this, "");

    /**
     * The column <code>public.customers.variable</code>.
     */
    public final TableField<CustomersRecord, Integer> VARIABLE = createField(DSL.name("variable"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.customers.customer_status</code>.
     */
    public final TableField<CustomersRecord, String> CUSTOMER_STATUS = createField(DSL.name("customer_status"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false).defaultValue(org.jooq.impl.DSL.field("'DRAFT'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<CustomersRecord, Object> LEXEMS = createField(DSL.name("lexems"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tsvector\""), this, "");

    /**
     * Create a <code>public.customers</code> table reference
     */
    public Customers() {
        this(DSL.name("customers"), null);
    }

    /**
     * Create an aliased <code>public.customers</code> table reference
     */
    public Customers(String alias) {
        this(DSL.name(alias), CUSTOMERS);
    }

    /**
     * Create an aliased <code>public.customers</code> table reference
     */
    public Customers(Name alias) {
        this(alias, CUSTOMERS);
    }

    private Customers(Name alias, Table<CustomersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customers(Name alias, Table<CustomersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Customers(Table<O> child, ForeignKey<O, CustomersRecord> key) {
        super(child, key, CUSTOMERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CUSTOMERS_HISTORY_ID_KEY, Indexes.CUSTOMERS_PKEY, Indexes.CUSTOMERS_SEARCH_IDX);
    }

    @Override
    public UniqueKey<CustomersRecord> getPrimaryKey() {
        return Keys.CUSTOMERS_PKEY;
    }

    @Override
    public List<UniqueKey<CustomersRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomersRecord>>asList(Keys.CUSTOMERS_PKEY, Keys.CUSTOMERS_HISTORY_ID_KEY);
    }

    @Override
    public Customers as(String alias) {
        return new Customers(DSL.name(alias), this);
    }

    @Override
    public Customers as(Name alias) {
        return new Customers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(String name) {
        return new Customers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(Name name) {
        return new Customers(name, null);
    }
}
